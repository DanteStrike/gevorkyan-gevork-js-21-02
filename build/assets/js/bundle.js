!function o(r,i,s){function a(e,t){if(!i[e]){if(!r[e]){var n="function"==typeof require&&require;if(!t&&n)return n(e,!0);if(l)return l(e,!0);throw(n=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",n}n=i[e]={exports:{}},r[e][0].call(n.exports,function(t){return a(r[e][1][t]||t)},n,n.exports,o,r,i,s)}return i[e].exports}for(var l="function"==typeof require&&require,t=0;t<s.length;t++)a(s[t]);return a}({1:[function(t,e,n){"use strict";var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var r=o(t("./people")),t=(Object.defineProperty(i.prototype,"cur",{get:function(){return null===this.prev&&null!==this.next?this.next-1:null!==this.prev&&null===this.next||null!==this.prev&&null!==this.next?this.prev+1:-1},enumerable:!1,configurable:!0}),i.parsePage=function(t){return new i(t)},i.defaultPage=function(){return new i({previous:null,next:null,results:[]})},i.getPageNum=function(t){if(null===t)return null;t=t.match(/(?<=page=)[0-9]+/);return null===t?null:Number(t)},i);function i(t){this.prev=i.getPageNum(t.previous),this.next=i.getPageNum(t.next),this.peoples=r.default.parsePeoples(t.results)}n.default=t},{"./people":2}],2:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=(r.parsePeoples=function(t){return t.map(function(t){return new r(t)})},r.fixNum=function(t){t=Number(t.replace(",","."));return Number.isNaN(t)?-1:t},r);function r(t){this.name=t.name,this.height=r.fixNum(t.height),this.mass=r.fixNum(t.mass),this.gender=t.gender}n.default=o},{}],3:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var o=t("../utils/dom"),t=(r.prototype.getElement=function(){return this.element||(this.element=(0,o.createElement)(this.getTemplate())),this.element},r.prototype.removeElement=function(){this.element=null},r);function r(){this.element=null}n.default=t},{"../utils/dom":14}],4:[function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var s,t=i(t("./abstract-component")),r=(s=t.default,r(a,s),a.prototype.getTemplate=function(){return'<div class="table__loading"><div></div><div></div><div></div>'},a);function a(){return s.call(this)||this}n.default=r},{"./abstract-component":3}],5:[function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var s,i=i(t("./abstract-component")),a=t("../utils/dom"),r=(s=i.default,r(l,s),Object.defineProperty(l.prototype,"curNum",{set:function(t){this.curNumSpan.textContent=t.toString()},enumerable:!1,configurable:!0}),l.prototype.disablePrevButton=function(){this.prevButton.disabled=!0},l.prototype.disableNextButton=function(){this.nextButton.disabled=!0},l.prototype.enablePrevButton=function(){this.prevButton.disabled=!1},l.prototype.enableNextButton=function(){this.nextButton.disabled=!1},l.prototype.onNavClick=function(t){t.preventDefault();t=t.target;if("BUTTON"===t.nodeName)switch(t.dataset.value){case"PREV":this.onPrevBtnClick();break;case"NEXT":this.onNextBtnClick()}},l.prototype.getTemplate=function(){return'<nav class="table__nav" >\n                <button class="table__nav-btn table__nav-btn--prev" data-value="PREV" disabled>Prev</button>\n                <p class="table__nav-page">Page: <span class="table__nav-num"></span></p>\n                <button class="table__nav-btn table__nav-btn--next" data-value="NEXT" disabled>Next</button>\n            </nav>'},l);function l(t){var e=t.num,n=t.onPrevBtnClick,t=t.onNextBtnClick,o=s.call(this)||this;return o.prevButton=(0,a.safeQuery)(o.getElement(),".table__nav-btn--prev"),o.nextButton=(0,a.safeQuery)(o.getElement(),".table__nav-btn--next"),o.curNumSpan=(0,a.safeQuery)(o.getElement(),".table__nav-num"),o.onPrevBtnClick=n,o.onNextBtnClick=t,o.curNum=e,o.getElement().addEventListener("click",function(t){return o.onNavClick(t)}),o}n.default=r},{"../utils/dom":14,"./abstract-component":3}],6:[function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var s,t=i(t("./abstract-component")),r=(s=t.default,r(a,s),a.prototype.getTemplate=function(){return'<li class="people">\n              <p class="people__prop people__prop--name">'+this.name+'</p>\n              <p class="people__prop people__prop--height">'+this.height+'</p>\n              <p class="people__prop people__prop--mass">'+this.mass+'</p>\n              <p class="people__prop people__prop--gender">'+this.gender+"</p>\n            </li>"},a);function a(t){var e=t.name,n=void 0===e?"unknown":e,o=t.height,r=void 0===o?-1:o,e=t.mass,o=void 0===e?-1:e,e=t.gender,t=void 0===e?"unknown":e,e=s.call(this)||this;return e.name=n,e.height=r,e.mass=o,e.gender=t,e}n.default=r},{"./abstract-component":3}],7:[function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var s,i=i(t("./abstract-component")),a=t("../utils/dom"),r=(s=i.default,r(l,s),l.prototype.onSortFormClick=function(t){t=t.target;"LABEL"===t.nodeName&&(t=(0,a.safeQuery)(this.getElement(),"#"+t.htmlFor),this.sortType=t.dataset.sortType,this.onSortTypeChange(this.sortType))},l.prototype.getTemplate=function(){return'<form class="table__sort sort" method="get" action="#">\n              <div class="sort__item">\n                <input class="sort__input visually-hidden" id="sort-name" type="radio" name="sort" value="NAME" data-sort-type="NAME">\n                <label class="sort__label" for="sort-name">Name</label>\n              </div>\n\n              <div class="sort__item">\n                <input class="sort__input visually-hidden" id="sort-height" type="radio" name="sort" value="HEIGHT" data-sort-type="HEIGHT">\n                <label class="sort__label" for="sort-height">Height</label>\n              </div>\n\n              <div class="sort__item">\n                <input class="sort__input visually-hidden" id="sort-mass" type="radio" name="sort" value="MASS" data-sort-type="MASS">\n                <label class="sort__label" for="sort-mass">Mass</label>\n              </div>\n\n              <div class="sort__item">\n                <input class="sort__input visually-hidden" id="sort-gender" type="radio" name="sort" value="GENDER" data-sort-type="GENDER">\n                <label class="sort__label" for="sort-gender">Gender</label>\n              </div>\n            </form>'},l);function l(t){var e=t.sortType,t=t.onSortTypeChange,n=s.call(this)||this;return n.sortType=e,n.onSortTypeChange=t,(0,a.safeQuery)(n.getElement(),'[data-sort-type="'+n.sortType+'"]').checked=!0,n.getElement().addEventListener("click",function(t){return n.onSortFormClick(t)}),n}n.default=r},{"../utils/dom":14,"./abstract-component":3}],8:[function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var s,i=i(t("./abstract-component")),a=t("../utils/dom"),r=(s=i.default,r(l,s),Object.defineProperty(l.prototype,"tableList",{get:function(){return(0,a.safeQuery)(this.getElement(),".table__peoples")},enumerable:!1,configurable:!0}),l.prototype.block=function(){this.getElement().classList.add("table--loading")},l.prototype.unblock=function(){this.getElement().classList.remove("table--loading")},l.prototype.getTemplate=function(){return'<section class="table">\n              <ul class="table__peoples"></ul>\n            </section>'},l);function l(){return s.call(this)||this}n.default=r},{"../utils/dom":14,"./abstract-component":3}],9:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={tableStartPage:1}},{}],10:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.default={endPoint:"https://swapi.dev/api/people"}},{}],11:[function(t,e,n){"use strict";var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var r=o(t("../components/table")),i=o(t("../components/sort-view")),s=o(t("../components/people")),a=o(t("../components/navigation")),l=o(t("../components/loading-view")),u=t("../utils/dom"),p=o(t("../adapters/page")),t=(c.prototype.setPage=function(t){this.page=t,this.nav.curNum=this.page.cur,this.loadingModOFF(),this.sort(),this.update()},c.prototype.loadingModOFF=function(){null!==this.page.prev&&this.nav.enablePrevButton(),null!==this.page.next&&this.nav.enableNextButton(),(0,u.unmount)(this.loadView.getElement()),this.table.unblock()},c.prototype.init=function(){(0,u.render)(this.container,this.table.getElement(),"AFTERBEGIN"),(0,u.render)(this.table.getElement(),this.sortView.getElement(),"AFTERBEGIN"),(0,u.render)(this.table.getElement(),this.nav.getElement(),"BEFOREEND"),this.loadingModON()},c.prototype.onSortTypeChange=function(t){this.sortType===t?this.toggleSortMod():this.sortType=t,this.sort(),this.update()},c.prototype.toggleSortMod=function(){"UP"!==this.sortMod?this.sortMod="UP":this.sortMod="DOWN"},c.prototype.sort=function(){var r=this;this.page.peoples.sort(function(t,e){var n,o;switch(r.sortType){case"NAME":n=t.name.toLowerCase(),o=e.name.toLowerCase();break;case"GENDER":n=t.gender.toLowerCase(),o=e.gender.toLowerCase();break;case"HEIGHT":n=t.height,o=e.height;break;case"MASS":n=t.mass,o=e.mass}return o<n?1:n<o?-1:0}),"UP"===this.sortMod&&this.page.peoples.reverse()},c.prototype.loadingModON=function(){this.nav.disableNextButton(),this.nav.disablePrevButton(),(0,u.render)(this.table.getElement(),this.loadView.getElement(),"AFTERBEGIN"),this.table.block()},c.prototype.onNavPrevClick=function(){null!==this.page.prev&&(this.loadingModON(),this.onPageChange(this.page.prev))},c.prototype.onNavNextClick=function(){null!==this.page.next&&(this.loadingModON(),this.onPageChange(this.page.next))},c.prototype.update=function(){var e=this;this.table.tableList.innerHTML="",this.page.peoples.forEach(function(t){(0,u.render)(e.table.tableList,new s.default(t).getElement(),"BEFOREEND")})},c);function c(t,e){this.container=t,this.onPageChange=e,this.page=p.default.defaultPage(),this.table=new r.default,this.sortType="NAME",this.sortMod="DOWN",this.sortView=new i.default({sortType:this.sortType,onSortTypeChange:this.onSortTypeChange.bind(this)}),this.nav=new a.default({num:-1,onPrevBtnClick:this.onNavPrevClick.bind(this),onNextBtnClick:this.onNavNextClick.bind(this)}),this.loadView=new l.default,this.init()}n.default=t},{"../adapters/page":1,"../components/loading-view":4,"../components/navigation":5,"../components/people":6,"../components/sort-view":7,"../components/table":8,"../utils/dom":14}],12:[function(t,e,n){"use strict";var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var r=o(t("./server/api")),i=o(t("./controllers/table-controller")),n=o(t("./configs/serverConfig")),t=o(t("./configs/appConfig")),s=new r.default(n.default),n=document.querySelector("#root");if(null===n)throw new Error("Can't find root node");var a=new i.default(n,function(t){s.getPage(t).then(function(t){a.setPage(t)}).catch(function(){alert("Connection error"),a.loadingModOFF()})});s.getPage(t.default.tableStartPage).then(function(t){a.setPage(t)})},{"./configs/appConfig":9,"./configs/serverConfig":10,"./controllers/table-controller":11,"./server/api":13}],13:[function(t,e,n){"use strict";var o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0});var r=o(t("../adapters/page")),t=(i.prototype.getPage=function(t){return this.load({url:"?page="+t}).then(function(t){return t.json()}).then(function(t){return r.default.parsePage(t)})},i.prototype.load=function(t){var e=t.url,t=t.method;return fetch(this.endPoint+"/"+(void 0===e?"":e),{method:void 0===t?"GET":t}).then(function(t){if(200<=t.status&&t.status<300)return t;throw new Error(t.status+": "+t.statusText)}).catch(function(t){throw t})},i);function i(t){t=t.endPoint;this.endPoint=void 0===t?"":t}n.default=t},{"../adapters/page":1}],14:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.unmount=n.render=n.safeQuery=n.createElement=void 0;n.createElement=function(t,e){e="DEFAULT"===(e=void 0===e?"DEFAULT":e)?document.createElement("div"):document.createElement("tbody");if(e.innerHTML=t,null===e.firstChild)throw new Error("Can't create correct element");return e.firstChild};n.safeQuery=function(t,e){e=t.querySelector(e);if(null===e)throw new Error("Element not found");return e};n.render=function(t,e,n){switch(n){case"AFTERBEGIN":t.prepend(e);break;case"BEFOREEND":t.append(e)}};n.unmount=function(t){t&&t.remove()}},{}]},{},[12]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,

!function n(o,i,a){function u(t,e){if(!i[t]){if(!o[t]){var r="function"==typeof require&&require;if(!e&&r)return r(t,!0);if(l)return l(t,!0);throw(r=new Error("Cannot find module '"+t+"'")).code="MODULE_NOT_FOUND",r}r=i[t]={exports:{}},o[t][0].call(r.exports,function(e){return u(o[t][1][e]||e)},r,r.exports,n,o,i,a)}return i[t].exports}for(var l="function"==typeof require&&require,e=0;e<a.length;e++)u(a[e]);return u}({1:[function(e,t,r){t.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e},t.exports.default=t.exports,t.exports.__esModule=!0},{}],2:[function(e,t,r){function l(e,t,r,n,o,i,a){try{var u=e[i](a),l=u.value}catch(e){return void r(e)}u.done?t(l):Promise.resolve(l).then(n,o)}t.exports=function(u){return function(){var e=this,a=arguments;return new Promise(function(t,r){var n=u.apply(e,a);function o(e){l(n,t,r,o,i,"next",e)}function i(e){l(n,t,r,o,i,"throw",e)}o(void 0)})}},t.exports.default=t.exports,t.exports.__esModule=!0},{}],3:[function(e,t,r){t.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},t.exports.default=t.exports,t.exports.__esModule=!0},{}],4:[function(e,t,r){function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}t.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e},t.exports.default=t.exports,t.exports.__esModule=!0},{}],5:[function(e,t,r){function n(e){return t.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},t.exports.default=t.exports,t.exports.__esModule=!0,n(e)}t.exports=n,t.exports.default=t.exports,t.exports.__esModule=!0},{}],6:[function(e,t,r){var n=e("./setPrototypeOf.js");t.exports=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&n(e,t)},t.exports.default=t.exports,t.exports.__esModule=!0},{"./setPrototypeOf.js":9}],7:[function(e,t,r){t.exports=function(e){return e&&e.__esModule?e:{default:e}},t.exports.default=t.exports,t.exports.__esModule=!0},{}],8:[function(e,t,r){var n=e("@babel/runtime/helpers/typeof").default,o=e("./assertThisInitialized.js");t.exports=function(e,t){if(t&&("object"===n(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return o(e)},t.exports.default=t.exports,t.exports.__esModule=!0},{"./assertThisInitialized.js":1,"@babel/runtime/helpers/typeof":10}],9:[function(e,r,t){function n(e,t){return r.exports=n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r.exports.default=r.exports,r.exports.__esModule=!0,n(e,t)}r.exports=n,r.exports.default=r.exports,r.exports.__esModule=!0},{}],10:[function(e,t,r){function n(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?t.exports=n=function(e){return typeof e}:t.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t.exports.default=t.exports,t.exports.__esModule=!0,n(e)}t.exports=n,t.exports.default=t.exports,t.exports.__esModule=!0},{}],11:[function(e,t,r){t.exports=e("regenerator-runtime")},{"regenerator-runtime":12}],12:[function(e,t,r){t=function(a){"use strict";var l,e=Object.prototype,s=e.hasOwnProperty,t="function"==typeof Symbol?Symbol:{},n=t.iterator||"@@iterator",r=t.asyncIterator||"@@asyncIterator",o=t.toStringTag||"@@toStringTag";function i(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{i({},"")}catch(e){i=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var o,i,a,u,t=t&&t.prototype instanceof b?t:b,t=Object.create(t.prototype),n=new O(n||[]);return t._invoke=(o=e,i=r,a=n,u=f,function(e,t){if(u===h)throw new Error("Generator is already running");if(u===d){if("throw"===e)throw t;return R()}for(a.method=e,a.arg=t;;){var r=a.delegate;if(r){var n=function e(t,r){var n=t.iterator[r.method];if(n===l){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=l,e(t,r),"throw"===r.method))return m;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var n=c(n,t.iterator,r.arg);if("throw"===n.type)return r.method="throw",r.arg=n.arg,r.delegate=null,m;n=n.arg;if(!n)return r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,m;{if(!n.done)return n;r[t.resultName]=n.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=l)}r.delegate=null;return m}(r,a);if(n){if(n===m)continue;return n}}if("next"===a.method)a.sent=a._sent=a.arg;else if("throw"===a.method){if(u===f)throw u=d,a.arg;a.dispatchException(a.arg)}else"return"===a.method&&a.abrupt("return",a.arg);u=h;n=c(o,i,a);if("normal"===n.type){if(u=a.done?d:p,n.arg!==m)return{value:n.arg,done:a.done}}else"throw"===n.type&&(u=d,a.method="throw",a.arg=n.arg)}}),t}function c(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}a.wrap=u;var f="suspendedStart",p="suspendedYield",h="executing",d="completed",m={};function b(){}function y(){}function g(){}var v={};i(v,n,function(){return this});t=Object.getPrototypeOf,t=t&&t(t(C([])));t&&t!==e&&s.call(t,n)&&(v=t);var _=g.prototype=b.prototype=Object.create(v);function x(e){["next","throw","return"].forEach(function(t){i(e,t,function(e){return this._invoke(t,e)})})}function w(a,u){var t;this._invoke=function(r,n){function e(){return new u(function(e,t){!function t(e,r,n,o){e=c(a[e],a,r);if("throw"!==e.type){var i=e.arg;return(r=i.value)&&"object"==typeof r&&s.call(r,"__await")?u.resolve(r.__await).then(function(e){t("next",e,n,o)},function(e){t("throw",e,n,o)}):u.resolve(r).then(function(e){i.value=e,n(i)},function(e){return t("throw",e,n,o)})}o(e.arg)}(r,n,e,t)})}return t=t?t.then(e,e):e()}}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function k(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function C(t){if(t){var e=t[n];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,e=function e(){for(;++r<t.length;)if(s.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=l,e.done=!0,e};return e.next=e}}return{next:R}}function R(){return{value:l,done:!0}}return i(_,"constructor",y.prototype=g),i(g,"constructor",y),y.displayName=i(g,o,"GeneratorFunction"),a.isGeneratorFunction=function(e){e="function"==typeof e&&e.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},a.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,i(e,o,"GeneratorFunction")),e.prototype=Object.create(_),e},a.awrap=function(e){return{__await:e}},x(w.prototype),i(w.prototype,r,function(){return this}),a.AsyncIterator=w,a.async=function(e,t,r,n,o){void 0===o&&(o=Promise);var i=new w(u(e,t,r,n),o);return a.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},x(_),i(_,o,"Generator"),i(_,n,function(){return this}),i(_,"toString",function(){return"[object Generator]"}),a.keys=function(r){var e,n=[];for(e in r)n.push(e);return n.reverse(),function e(){for(;n.length;){var t=n.pop();if(t in r)return e.value=t,e.done=!1,e}return e.done=!0,e}},a.values=C,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=l,this.done=!1,this.delegate=null,this.method="next",this.arg=l,this.tryEntries.forEach(k),!e)for(var t in this)"t"===t.charAt(0)&&s.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=l)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(r){if(this.done)throw r;var n=this;function e(e,t){return i.type="throw",i.arg=r,n.next=e,t&&(n.method="next",n.arg=l),!!t}for(var t=this.tryEntries.length-1;0<=t;--t){var o=this.tryEntries[t],i=o.completion;if("root"===o.tryLoc)return e("end");if(o.tryLoc<=this.prev){var a=s.call(o,"catchLoc"),u=s.call(o,"finallyLoc");if(a&&u){if(this.prev<o.catchLoc)return e(o.catchLoc,!0);if(this.prev<o.finallyLoc)return e(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return e(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return e(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;0<=r;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&s.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}var i=(o=o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc?null:o)?o.completion:{};return i.type=e,i.arg=t,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),k(r),m}},catch:function(e){for(var t=this.tryEntries.length-1;0<=t;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n,o=r.completion;return"throw"===o.type&&(n=o.arg,k(r)),n}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:C(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=l),m}},a}("object"==typeof t?t.exports:{});try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}},{}],13:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/createClass"));r.default=function(){function t(e){(0,o.default)(this,t),this.id=e.id,this.title=e.title,this.url=e.url}return(0,i.default)(t,null,[{key:"parseImg",value:function(e){return new t(e)}}]),t}()},{"@babel/runtime/helpers/classCallCheck":3,"@babel/runtime/helpers/createClass":4,"@babel/runtime/helpers/interopRequireDefault":7}],14:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/createClass")),a=e("../utils/utils");r.default=function(){function e(){if((0,o.default)(this,e),(this instanceof e?this.constructor:void 0)===e)throw new Error("Can't instantiate AbstractComponent, only concrete one.");this._element=null}return(0,i.default)(e,[{key:"getElement",value:function(){return this._element||(this._element=(0,a.createElement)(this._getTemplate())),this._element}},{key:"removeElement",value:function(){this._element=null}},{key:"_getTemplate",value:function(){throw new Error("Abstract method not implemented: getTemplate")}}]),e}()},{"../utils/utils":26,"@babel/runtime/helpers/classCallCheck":3,"@babel/runtime/helpers/createClass":4,"@babel/runtime/helpers/interopRequireDefault":7}],15:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var i=n(e("@babel/runtime/helpers/classCallCheck")),a=n(e("@babel/runtime/helpers/createClass")),u=n(e("@babel/runtime/helpers/inherits")),o=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(r){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var e,t=(0,l.default)(r);return t=n?(e=(0,l.default)(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments),(0,o.default)(this,t)}}e=function(e){(0,u.default)(o,e);var n=s(o);function o(e){var t=e.url,r=void 0===t?"https://via.placeholder.com/260x200":t,t=e.title,e=void 0===t?"image":t;return(0,i.default)(this,o),(t=n.call(this))._url=r,t._title=e,t}return(0,a.default)(o,[{key:"_getTemplate",value:function(){return'<li class="img-list__item">\n              <img class="image" src="'.concat(this._url,'" alt="').concat(this._title,'" width="260" height="200">\n            </li>')}}]),o}(n(e("./abstract-component")).default);r.default=e},{"./abstract-component":14,"@babel/runtime/helpers/classCallCheck":3,"@babel/runtime/helpers/createClass":4,"@babel/runtime/helpers/getPrototypeOf":5,"@babel/runtime/helpers/inherits":6,"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/possibleConstructorReturn":8}],16:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/createClass")),a=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(r){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var e,t=(0,l.default)(r);return t=n?(e=(0,l.default)(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments),(0,u.default)(this,t)}}e=function(e){(0,a.default)(r,e);var t=s(r);function r(){return(0,o.default)(this,r),t.call(this)}return(0,i.default)(r,[{key:"_getTemplate",value:function(){return'<ul class="img-list work-area__img-list"></ul>'}}]),r}(n(e("./abstract-component")).default);r.default=e},{"./abstract-component":14,"@babel/runtime/helpers/classCallCheck":3,"@babel/runtime/helpers/createClass":4,"@babel/runtime/helpers/getPrototypeOf":5,"@babel/runtime/helpers/inherits":6,"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/possibleConstructorReturn":8}],17:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/createClass")),a=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf")),n=n(e("./abstract-component")),s=e("../enum/enum");function c(r){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var e,t=(0,l.default)(r);return t=n?(e=(0,l.default)(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments),(0,u.default)(this,t)}}n=function(e){(0,a.default)(n,e);var r=c(n);function n(e){var t,e=e.onImageSubmit,e=void 0===e?function(){}:e;return(0,o.default)(this,n),(t=r.call(this))._onImageSubmit=e,t._inputName=t.getElement().querySelector("#img-uploader__input-name"),t._inputImg=t.getElement().querySelector("#img-uploader__input-img"),t.getElement().addEventListener("click",function(e){return t._onFormClick(e)}),t}return(0,i.default)(n,[{key:"block",value:function(){this.getElement().classList.add("img-uploader--block")}},{key:"unBlock",value:function(){this.getElement().classList.remove("img-uploader--block")}},{key:"_onFormClick",value:function(e){var t=e.currentTarget;e.target.nodeName===s.TagName.BUTTON&&t.reportValidity()&&(e.preventDefault(),t=new FormData(t),this._onImageSubmit(t),this._inputName.value="",this._inputImg.value="")}},{key:"_getTemplate",value:function(){return'<form class="img-uploader work-area__img-uploader" method="post" action="#">\n                <label class="img-uploader__label" for="img-uploader__input-name">Название изображения ([a-zA-Z0-9]):</label>\n                <input class="img-uploader__input" type="text" id="img-uploader__input-name" name="name" pattern="^[a-zA-Z0-9]+$">\n                <label class="img-uploader__label" for="img-uploader__input-img">Выберите изборажение:</label>\n                <input class="img-uploader__input" type="file" id="img-uploader__input-img" name="image" accept="image/*" required>\n                <button class="img-uploader__btn" type="submit">Отправить</button>\n              </form>'}}]),n}(n.default);r.default=n},{"../enum/enum":22,"./abstract-component":14,"@babel/runtime/helpers/classCallCheck":3,"@babel/runtime/helpers/createClass":4,"@babel/runtime/helpers/getPrototypeOf":5,"@babel/runtime/helpers/inherits":6,"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/possibleConstructorReturn":8}],18:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/createClass")),a=n(e("@babel/runtime/helpers/inherits")),u=n(e("@babel/runtime/helpers/possibleConstructorReturn")),l=n(e("@babel/runtime/helpers/getPrototypeOf"));function s(r){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(e){return!1}}();return function(){var e,t=(0,l.default)(r);return t=n?(e=(0,l.default)(this).constructor,Reflect.construct(t,arguments,e)):t.apply(this,arguments),(0,u.default)(this,t)}}e=function(e){(0,a.default)(r,e);var t=s(r);function r(){var e;return(0,o.default)(this,r),(e=t.call(this))._pin=e.getElement().querySelector(".loader__pin"),e._req=null,e._deg=0,e._reset(),e}return(0,i.default)(r,[{key:"startAnimation",value:function(){var e=this;this._pin.style.display="";function t(){e._deg=360===e._deg?0:e._deg+5,e._pin.style.transform="rotateY(".concat(e._deg,"deg)"),e._req=requestAnimationFrame(t)}this._req=requestAnimationFrame(t)}},{key:"stopAnimation",value:function(){null!==this._req&&cancelAnimationFrame(this._req),this._reset()}},{key:"_reset",value:function(){this._pin.style.display="none",this._pin.style.transform="",this._req=null,this._deg=0}},{key:"_getTemplate",value:function(){return'<div class="loader"><div class="loader__pin"></div></div>'}}]),r}(n(e("./abstract-component")).default);r.default=e},{"./abstract-component":14,"@babel/runtime/helpers/classCallCheck":3,"@babel/runtime/helpers/createClass":4,"@babel/runtime/helpers/getPrototypeOf":5,"@babel/runtime/helpers/inherits":6,"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/helpers/possibleConstructorReturn":8}],19:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var n={storage:localStorage,key:"imgsSentToImgBB",initialData:[]};r.default=n},{}],20:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;r.default={endPoint:"https://api.imgbb.com/1",apiKey:"938ac1eb51cbc75dc7476edde1350b65"}},{}],21:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/createClass")),a=e("../utils/utils"),u=n(e("../components/img-uploader")),l=n(e("../components/img-list")),s=n(e("../components/img-item")),c=e("../enum/enum"),f=n(e("../components/loader")),e=function(){function n(e){var t=this,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:function(){};(0,o.default)(this,n),this._container=e,this._imgUploader=new u.default({onImageSubmit:function(e){t._onImageSubmit(),r(e)}}),this._loader=new f.default,this._imgList=new l.default,this._init()}return(0,i.default)(n,[{key:"updateImages",value:function(e){var t=this;this._imgList.getElement().innerHTML="",e.forEach(function(e){(0,a.render)(t._imgList.getElement(),new s.default(e).getElement(),c.Position.BEFOREEND)}),this.unlock()}},{key:"unlock",value:function(){this._imgUploader.unBlock(),this._loader.stopAnimation()}},{key:"_init",value:function(){(0,a.render)(this._container,this._imgUploader.getElement(),c.Position.BEFOREEND),(0,a.render)(this._container,this._loader.getElement(),c.Position.BEFOREEND),(0,a.render)(this._container,this._imgList.getElement(),c.Position.BEFOREEND)}},{key:"_onImageSubmit",value:function(){this._imgUploader.block(),this._loader.startAnimation()}}]),n}();r.default=e},{"../components/img-item":15,"../components/img-list":16,"../components/img-uploader":17,"../components/loader":18,"../enum/enum":22,"../utils/utils":26,"@babel/runtime/helpers/classCallCheck":3,"@babel/runtime/helpers/createClass":4,"@babel/runtime/helpers/interopRequireDefault":7}],22:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.TagName=r.Position=r.Method=void 0;r.Method={GET:"get",POST:"post"};r.Position={AFTERBEGIN:"afterbegin",BEFOREEND:"beforeend"};r.TagName={INPUT:"INPUT",BUTTON:"BUTTON",LABEL:"LABEL"}},{}],23:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault"),o=n(e("@babel/runtime/regenerator")),i=n(e("@babel/runtime/helpers/asyncToGenerator")),a=n(e("./server/api")),u=n(e("./configs/img-b-b-server-config")),l=n(e("./controllers/gallery-controller")),s=e("./utils/utils"),c=n(e("./configs/images-store-config")),e=n(e("./storage/arr-store")),f=new a.default(u.default),p=new e.default(c.default),c=function(){var t=(0,i.default)(o.default.mark(function e(t){var r,n;return o.default.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.get("image"),e.next=3,(0,s.encodeToBase64)(r);case 3:return r=e.sent,t.set("image",r.replace(/^.*,/,"")),e.next=7,f.uploadImg(t);case 7:if(n=e.sent,p.data.every(function(e){return e.id!==n.id}))return p.push(n),h.updateImages(p.data),e.abrupt("return");e.next=12;break;case 12:alert("Image in gallery already!!!"),h.unlock();case 14:case"end":return e.stop()}},e)}));return function(e){return t.apply(this,arguments)}}(),h=new l.default(document.querySelector("#root"),c);h.updateImages(p.data)},{"./configs/images-store-config":19,"./configs/img-b-b-server-config":20,"./controllers/gallery-controller":21,"./server/api":24,"./storage/arr-store":25,"./utils/utils":26,"@babel/runtime/helpers/asyncToGenerator":2,"@babel/runtime/helpers/interopRequireDefault":7,"@babel/runtime/regenerator":11}],24:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/createClass")),a=e("../enum/enum"),u=e("../utils/utils"),l=n(e("../adapters/img-bb"));r.default=function(){function r(e){var t=e.endPoint,e=e.apiKey;(0,o.default)(this,r),this._endPoint=t,this._apiKey=e}return(0,i.default)(r,[{key:"uploadImg",value:function(e){return e.set("key",this._apiKey),this._load({url:"upload",method:a.Method.POST,timeout:1e4,body:e}).then(u.toJSON).then(function(e){return l.default.parseImg(e.data)})}},{key:"_load",value:function(e){var t=e.url,r=e.method,n=void 0===r?a.Method.GET:r,o=e.body,r=void 0===o?null:o,o=e.headers,o=void 0===o?new Headers:o,e=e.timeout,e=void 0===e?5e3:e;return fetch("".concat(this._endPoint,"/").concat(t),{method:n,body:r,headers:o,timeout:e}).then(function(e){if(200<=e.status&&e.status<300)return e;throw new Error("".concat(e.status,": ").concat(e.statusText))}).catch(function(e){throw e})}}]),r}()},{"../adapters/img-bb":13,"../enum/enum":22,"../utils/utils":26,"@babel/runtime/helpers/classCallCheck":3,"@babel/runtime/helpers/createClass":4,"@babel/runtime/helpers/interopRequireDefault":7}],25:[function(e,t,r){"use strict";var n=e("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(r,"__esModule",{value:!0}),r.default=void 0;var o=n(e("@babel/runtime/helpers/classCallCheck")),i=n(e("@babel/runtime/helpers/createClass"));r.default=function(){function n(e){var t=e.storage,r=e.key,e=e.initialData;(0,o.default)(this,n),this._storage=t,this._key=r,this._data=this.isInStorage?JSON.parse(this._storage.getItem(this._key)):this._storage.setItem(this._key,JSON.stringify(e))}return(0,i.default)(n,[{key:"isInStorage",get:function(){return null!==this._storage.getItem(this._key)}},{key:"data",get:function(){return this._data.map(function(e){return Object.assign({},e)})}},{key:"push",value:function(e){this._data.push(e),this._save()}},{key:"_save",value:function(){this._storage.setItem(this._key,JSON.stringify(this._data))}}]),n}()},{"@babel/runtime/helpers/classCallCheck":3,"@babel/runtime/helpers/createClass":4,"@babel/runtime/helpers/interopRequireDefault":7}],26:[function(e,t,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.encodeToBase64=r.unmount=r.render=r.createElement=r.toJSON=void 0;var n=e("../enum/enum");r.toJSON=function(e){return e.json()};r.createElement=function(e){var t=document.createElement("div");return t.innerHTML=e,t.firstChild};r.render=function(e,t,r){switch(r){case n.Position.AFTERBEGIN:e.prepend(t);break;case n.Position.BEFOREEND:e.append(t)}};r.unmount=function(e){e&&e.remove()};r.encodeToBase64=function(n){return new Promise(function(e,t){var r=new FileReader;r.readAsDataURL(n),r.onload=function(){e(r.result)},r.onerror=function(){t(r.error)}})}},{"../enum/enum":22}]},{},[23]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2V0UHJvdG90eXBlT2YuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwic3JjL2pzL2FkYXB0ZXJzL2ltZy1iYi5qcyIsInNyYy9qcy9jb21wb25lbnRzL2Fic3RyYWN0LWNvbXBvbmVudC5qcyIsInNyYy9qcy9jb21wb25lbnRzL2ltZy1pdGVtLmpzIiwic3JjL2pzL2NvbXBvbmVudHMvaW1nLWxpc3QuanMiLCJzcmMvanMvY29tcG9uZW50cy9pbWctdXBsb2FkZXIuanMiLCJzcmMvanMvY29tcG9uZW50cy9sb2FkZXIuanMiLCJzcmMvanMvY29uZmlncy9pbWFnZXMtc3RvcmUtY29uZmlnLmpzIiwic3JjL2pzL2NvbmZpZ3MvaW1nLWItYi1zZXJ2ZXItY29uZmlnLmpzIiwic3JjL2pzL2NvbnRyb2xsZXJzL2dhbGxlcnktY29udHJvbGxlci5qcyIsInNyYy9qcy9lbnVtL2VudW0uanMiLCJzcmMvanMvaW5kZXguanMiLCJzcmMvanMvc2VydmVyL2FwaS5qcyIsInNyYy9qcy9zdG9yYWdlL2Fyci1zdG9yZS5qcyIsInNyYy9qcy91dGlscy91dGlscy5qcyJdLCJuYW1lcyI6WyJyIiwiZSIsIm4iLCJ0IiwibyIsImkiLCJmIiwiYyIsInJlcXVpcmUiLCJ1IiwiYSIsIkVycm9yIiwiY29kZSIsInAiLCJleHBvcnRzIiwiY2FsbCIsImxlbmd0aCIsIjEiLCJtb2R1bGUiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfX2VzTW9kdWxlIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVzb2x2ZSIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiYXJnIiwiaW5mbyIsInZhbHVlIiwiZXJyb3IiLCJkb25lIiwiUHJvbWlzZSIsInRoZW4iLCJmbiIsInRoaXMiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIm9iaiIsImRlZmF1bHQiLCJfdHlwZW9mIiwiYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX3NldFByb3RvdHlwZU9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsImRlZmluZSIsIndyYXAiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwiY29udGV4dCIsInN0YXRlIiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJtZXRob2QiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInJlY29yZCIsInRyeUNhdGNoIiwidHlwZSIsInJlc3VsdE5hbWUiLCJuZXh0IiwibmV4dExvYyIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldFByb3RvIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJ2YWx1ZXMiLCJHcCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsImludm9rZSIsInJlc3VsdCIsIl9fYXdhaXQiLCJ1bndyYXBwZWQiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiZW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc05hTiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJuYW1lIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwia2V5cyIsIm9iamVjdCIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInNsaWNlIiwic3RvcCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJjYXRjaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIkltZ0JCIiwiZGF0YSIsIl9jbGFzc0NhbGxDaGVjazIiLCJpZCIsInRpdGxlIiwidXJsIiwiX3V0aWxzIiwiQWJzdHJhY3RDb21wb25lbnQiLCJfZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJJbWdJdGVtIiwiX3JlZiIsIl9yZWYkdXJsIiwiX3JlZiR0aXRsZSIsIl90aGlzIiwiX3N1cGVyIiwiX3VybCIsIl90aXRsZSIsImNvbmNhdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJJbWdMaXN0IiwiX2Fic3RyYWN0Q29tcG9uZW50IiwiX2VudW0iLCJJbWdVcGxvYWRlciIsIl9yZWYkb25JbWFnZVN1Ym1pdCIsIm9uSW1hZ2VTdWJtaXQiLCJfb25JbWFnZVN1Ym1pdCIsIl9pbnB1dE5hbWUiLCJnZXRFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIl9pbnB1dEltZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJfb25Gb3JtQ2xpY2siLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJmb3JtIiwiY3VycmVudFRhcmdldCIsIm5vZGVOYW1lIiwiVGFnTmFtZSIsIkJVVFRPTiIsInJlcG9ydFZhbGlkaXR5IiwicHJldmVudERlZmF1bHQiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiTG9hZGVyIiwiX3BpbiIsIl9yZXEiLCJfZGVnIiwiX3Jlc2V0IiwiX3RoaXMyIiwic3R5bGUiLCJkaXNwbGF5Iiwic3RlcCIsInRyYW5zZm9ybSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaW1hZ2VzU3RvcmVDb25maWciLCJzdG9yYWdlIiwibG9jYWxTdG9yYWdlIiwiaW5pdGlhbERhdGEiLCJlbmRQb2ludCIsImFwaUtleSIsIl9pbWdVcGxvYWRlciIsIl9pbWdMaXN0IiwiX2ltZ0l0ZW0iLCJfbG9hZGVyIiwiR2FsbGVyeUNvbnRyb2xsZXIiLCJjb250YWluZXIiLCJfb25JbWFnZVN1Ym1pdDIiLCJfY29udGFpbmVyIiwiX2luaXQiLCJpbWFnZXMiLCJpbm5lckhUTUwiLCJpbWFnZSIsInJlbmRlciIsIlBvc2l0aW9uIiwiQkVGT1JFRU5EIiwidW5sb2NrIiwidW5CbG9jayIsInN0b3BBbmltYXRpb24iLCJibG9jayIsInN0YXJ0QW5pbWF0aW9uIiwiR0VUIiwiUE9TVCIsIkFGVEVSQkVHSU4iLCJJTlBVVCIsIkxBQkVMIiwiX2FwaSIsIl9pbWdCQlNlcnZlckNvbmZpZyIsIl9nYWxsZXJ5Q29udHJvbGxlciIsIl9pbWFnZXNTdG9yZUNvbmZpZyIsIl9hcnJTdG9yZSIsImltZ0JCQVBJIiwiaW1hZ2VzU3RvcmUiLCJfYXN5bmNUb0dlbmVyYXRvcjIiLCJfcmVnZW5lcmF0b3IiLCJfY2FsbGVlIiwiaW1nQmFzZTY0IiwidXBsb2FkZWREYXRhIiwiX2NvbnRleHQiLCJpbWFnZUZpbGUiLCJnZXQiLCJlbmNvZGVUb0Jhc2U2NCIsInNldCIsInJlcGxhY2UiLCJ1cGxvYWRJbWciLCJldmVyeSIsImdhbGxlcnlDb250cm9sbGVyIiwidXBkYXRlSW1hZ2VzIiwiYWxlcnQiLCJfeCIsImRvY3VtZW50IiwiX2ltZ0JiIiwiQXBpIiwiX2VuZFBvaW50IiwiX2FwaUtleSIsIl9sb2FkIiwiTWV0aG9kIiwidGltZW91dCIsImJvZHkiLCJ0b0pTT04iLCJqc29uRGF0YSIsInBhcnNlSW1nIiwiX3JlZjIiLCJfcmVmMiRtZXRob2QiLCJfcmVmMiRib2R5IiwiX3JlZjIkaGVhZGVycyIsImhlYWRlcnMiLCJIZWFkZXJzIiwiX3JlZjIkdGltZW91dCIsImZldGNoIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiQXJyU3RvcmUiLCJfc3RvcmFnZSIsIl9rZXkiLCJfZGF0YSIsImlzSW5TdG9yYWdlIiwiSlNPTiIsInBhcnNlIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJtYXAiLCJhc3NpZ24iLCJfc2F2ZSIsImpzb24iLCJ0ZW1wbGF0ZSIsIm5ld0VsZW1lbnQiLCJmaXJzdENoaWxkIiwiZWxlbWVudCIsInBsYWNlIiwicHJlcGVuZCIsImFwcGVuZCIsImZpbGUiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzRGF0YVVSTCIsIm9ubG9hZCIsIm9uZXJyb3IiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEVBQUFDLEVBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsR0FBQSxJQUFBSixFQUFBRyxHQUFBLENBQUEsSUFBQUosRUFBQUksR0FBQSxDQUFBLElBQUFFLEVBQUEsbUJBQUFDLFNBQUFBLFFBQUEsSUFBQUYsR0FBQUMsRUFBQSxPQUFBQSxFQUFBRixHQUFBLEdBQUEsR0FBQUksRUFBQSxPQUFBQSxFQUFBSixHQUFBLEdBQUEsTUFBQUssRUFBQSxJQUFBQyxNQUFBLHVCQUFBTixFQUFBLE1B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Z0JBR3BDLFdBQ0UsT0FBTzdSLEtBQUs4UixNQUFNTyxJQUFJLFNBQUN4USxHQUFELE9BQVNiLE9BQU9zUixPQUFPLEdBQUl6USxPLGtCQUduRCxTQUFLc0gsR0FDSG5KLEtBQUs4UixNQUFNdkwsS0FBSzRDLEdBQ2hCbkosS0FBS3VTLFUsbUJBR1AsV0FDRXZTLEtBQUs0UixTQUFTTyxRQUFRblMsS0FBSzZSLEtBQU1HLEtBQUtJLFVBQVVwUyxLQUFLOFIsWSxpU0N2QnpELElBQUFySCxFQUFBdE0sRUFBQSxnQixTQUVzQixTQUFDcVQsR0FDckIsT0FBT0EsRUFBU2dCLFEsZ0JBR1csU0FBQ0MsR0FDNUIsSUFBTUMsRUFBYXRDLFNBQVN6RyxjQUFULE9BRW5CLE9BREErSSxFQUFXN0UsVUFBWTRFLEVBQ2hCQyxFQUFXQyxZLFNBR0UsU0FBQ25GLEVBQVdvRixFQUFTQyxHQUN6QyxPQUFRQSxHQUNOLEtBQUtwSSxFQUFBdUQsU0FBU1MsV0FDWmpCLEVBQVVzRixRQUFRRixHQUNsQixNQUNGLEtBQUtuSSxFQUFBdUQsU0FBU0MsVUFDWlQsRUFBVXVGLE9BQU9ILEssVUFRQSxTQUFDQSxHQUNsQkEsR0FDRkEsRUFBUXJILDJCQUlrQixTQUFDeUgsR0FDN0IsT0FBTyxJQUFJblQsUUFBUSxTQUFDVixFQUFTQyxHQUMzQixJQUFNNlQsRUFBUyxJQUFJQyxXQUNuQkQsRUFBT0UsY0FBY0gsR0FDckJDLEVBQU9HLE9BQVMsV0FDZGpVLEVBQVE4VCxFQUFPck4sU0FFakJxTixFQUFPSSxRQUFVLFdBQ2ZqVSxFQUFPNlQsRUFBT3RUIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQ7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FzeW5jVG9HZW5lcmF0b3I7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzcztcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTtcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZi5qc1wiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0cztcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mXCIpW1wiZGVmYXVsdFwiXTtcblxudmFyIGFzc2VydFRoaXNJbml0aWFsaXplZCA9IHJlcXVpcmUoXCIuL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qc1wiKTtcblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkge1xuICAgIHJldHVybiBjYWxsO1xuICB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJEZXJpdmVkIGNvbnN0cnVjdG9ycyBtYXkgb25seSByZXR1cm4gb2JqZWN0IG9yIHVuZGVmaW5lZFwiKTtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjtcbm1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG5cbiAgICBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG5cbiAgICBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7XG5tb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0cywgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiBkZWZpbmUob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JqW2tleV07XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBJRSA4IGhhcyBhIGJyb2tlbiBPYmplY3QuZGVmaW5lUHJvcGVydHkgdGhhdCBvbmx5IHdvcmtzIG9uIERPTSBvYmplY3RzLlxuICAgIGRlZmluZSh7fSwgXCJcIik7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGRlZmluZSA9IGZ1bmN0aW9uKG9iaiwga2V5LCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldID0gdmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lKEdwLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgZGVmaW5lKEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLCBcImNvbnN0cnVjdG9yXCIsIEdlbmVyYXRvckZ1bmN0aW9uKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIGRlZmluZShHcCwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yXCIpO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgZGVmaW5lKEdwLCBpdGVyYXRvclN5bWJvbCwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xuXG4gIGRlZmluZShHcCwgXCJ0b1N0cmluZ1wiLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsImNsYXNzIEltZ0JCIHtcbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIHRoaXMuaWQgPSBkYXRhW2BpZGBdO1xuICAgIHRoaXMudGl0bGUgPSBkYXRhW2B0aXRsZWBdO1xuICAgIHRoaXMudXJsID0gZGF0YVtgdXJsYF07XG4gIH1cblxuICBzdGF0aWMgcGFyc2VJbWcoZGF0YSkge1xuICAgIHJldHVybiBuZXcgSW1nQkIoZGF0YSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW1nQkI7XG4iLCJpbXBvcnQge2NyZWF0ZUVsZW1lbnR9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xuXG5cbmNsYXNzIEFic3RyYWN0Q29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKG5ldy50YXJnZXQgPT09IEFic3RyYWN0Q29tcG9uZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGluc3RhbnRpYXRlIEFic3RyYWN0Q29tcG9uZW50LCBvbmx5IGNvbmNyZXRlIG9uZS5gKTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgfVxuXG4gIGdldEVsZW1lbnQoKSB7XG4gICAgaWYgKCF0aGlzLl9lbGVtZW50KSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gY3JlYXRlRWxlbWVudCh0aGlzLl9nZXRUZW1wbGF0ZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxuXG4gIHJlbW92ZUVsZW1lbnQoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gIH1cblxuICBfZ2V0VGVtcGxhdGUoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBBYnN0cmFjdCBtZXRob2Qgbm90IGltcGxlbWVudGVkOiBnZXRUZW1wbGF0ZWApO1xuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgQWJzdHJhY3RDb21wb25lbnQ7XG4iLCJpbXBvcnQgQWJzdHJhY3RDb21wb25lbnQgZnJvbSBcIi4vYWJzdHJhY3QtY29tcG9uZW50XCI7XG5cbmNsYXNzIEltZ0l0ZW0gZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHt1cmwgPSBgaHR0cHM6Ly92aWEucGxhY2Vob2xkZXIuY29tLzI2MHgyMDBgLCB0aXRsZSA9IGBpbWFnZWB9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB0aGlzLl90aXRsZSA9IHRpdGxlO1xuICB9XG5cbiAgX2dldFRlbXBsYXRlKCkge1xuICAgIHJldHVybiBgPGxpIGNsYXNzPVwiaW1nLWxpc3RfX2l0ZW1cIj5cbiAgICAgICAgICAgICAgPGltZyBjbGFzcz1cImltYWdlXCIgc3JjPVwiJHt0aGlzLl91cmx9XCIgYWx0PVwiJHt0aGlzLl90aXRsZX1cIiB3aWR0aD1cIjI2MFwiIGhlaWdodD1cIjIwMFwiPlxuICAgICAgICAgICAgPC9saT5gO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEltZ0l0ZW07XG4iLCJpbXBvcnQgQWJzdHJhY3RDb21wb25lbnQgZnJvbSBcIi4vYWJzdHJhY3QtY29tcG9uZW50XCI7XG5cbmNsYXNzIEltZ0xpc3QgZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBfZ2V0VGVtcGxhdGUoKSB7XG4gICAgcmV0dXJuIGA8dWwgY2xhc3M9XCJpbWctbGlzdCB3b3JrLWFyZWFfX2ltZy1saXN0XCI+PC91bD5gO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEltZ0xpc3Q7XG4iLCJpbXBvcnQgQWJzdHJhY3RDb21wb25lbnQgZnJvbSBcIi4vYWJzdHJhY3QtY29tcG9uZW50XCI7XG5pbXBvcnQge1RhZ05hbWV9IGZyb20gXCIuLi9lbnVtL2VudW1cIjtcblxuY2xhc3MgSW1nVXBsb2FkZXIgZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHtvbkltYWdlU3VibWl0ID0gKCkgPT4ge319KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX29uSW1hZ2VTdWJtaXQgPSBvbkltYWdlU3VibWl0O1xuICAgIHRoaXMuX2lucHV0TmFtZSA9IHRoaXMuZ2V0RWxlbWVudCgpLnF1ZXJ5U2VsZWN0b3IoYCNpbWctdXBsb2FkZXJfX2lucHV0LW5hbWVgKTtcbiAgICB0aGlzLl9pbnB1dEltZyA9IHRoaXMuZ2V0RWxlbWVudCgpLnF1ZXJ5U2VsZWN0b3IoYCNpbWctdXBsb2FkZXJfX2lucHV0LWltZ2ApO1xuICAgIHRoaXMuZ2V0RWxlbWVudCgpLmFkZEV2ZW50TGlzdGVuZXIoYGNsaWNrYCwgKGV2dCkgPT4gdGhpcy5fb25Gb3JtQ2xpY2soZXZ0KSk7XG4gIH1cblxuICBibG9jaygpIHtcbiAgICB0aGlzLmdldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKGBpbWctdXBsb2FkZXItLWJsb2NrYCk7XG4gIH1cblxuICB1bkJsb2NrKCkge1xuICAgIHRoaXMuZ2V0RWxlbWVudCgpLmNsYXNzTGlzdC5yZW1vdmUoYGltZy11cGxvYWRlci0tYmxvY2tgKTtcbiAgfVxuXG4gIF9vbkZvcm1DbGljayhldnQpIHtcbiAgICBjb25zdCBmb3JtID0gZXZ0LmN1cnJlbnRUYXJnZXQ7XG4gICAgY29uc3QgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcblxuICAgIGlmICh0YXJnZXQubm9kZU5hbWUgIT09IFRhZ05hbWUuQlVUVE9OKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFmb3JtLnJlcG9ydFZhbGlkaXR5KCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcbiAgICB0aGlzLl9vbkltYWdlU3VibWl0KGZvcm1EYXRhKTtcbiAgICB0aGlzLl9pbnB1dE5hbWUudmFsdWUgPSBgYDtcbiAgICB0aGlzLl9pbnB1dEltZy52YWx1ZSA9IGBgO1xuICB9XG5cbiAgX2dldFRlbXBsYXRlKCkge1xuICAgIHJldHVybiBgPGZvcm0gY2xhc3M9XCJpbWctdXBsb2FkZXIgd29yay1hcmVhX19pbWctdXBsb2FkZXJcIiBtZXRob2Q9XCJwb3N0XCIgYWN0aW9uPVwiI1wiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImltZy11cGxvYWRlcl9fbGFiZWxcIiBmb3I9XCJpbWctdXBsb2FkZXJfX2lucHV0LW5hbWVcIj7QndCw0LfQstCw0L3QuNC1INC40LfQvtCx0YDQsNC20LXQvdC40Y8gKFthLXpBLVowLTldKTo8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImltZy11cGxvYWRlcl9faW5wdXRcIiB0eXBlPVwidGV4dFwiIGlkPVwiaW1nLXVwbG9hZGVyX19pbnB1dC1uYW1lXCIgbmFtZT1cIm5hbWVcIiBwYXR0ZXJuPVwiXlthLXpBLVowLTldKyRcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJpbWctdXBsb2FkZXJfX2xhYmVsXCIgZm9yPVwiaW1nLXVwbG9hZGVyX19pbnB1dC1pbWdcIj7QktGL0LHQtdGA0LjRgtC1INC40LfQsdC+0YDQsNC20LXQvdC40LU6PC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJpbWctdXBsb2FkZXJfX2lucHV0XCIgdHlwZT1cImZpbGVcIiBpZD1cImltZy11cGxvYWRlcl9faW5wdXQtaW1nXCIgbmFtZT1cImltYWdlXCIgYWNjZXB0PVwiaW1hZ2UvKlwiIHJlcXVpcmVkPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJpbWctdXBsb2FkZXJfX2J0blwiIHR5cGU9XCJzdWJtaXRcIj7QntGC0L/RgNCw0LLQuNGC0Yw8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9mb3JtPmA7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBJbWdVcGxvYWRlcjtcbiIsImltcG9ydCBBYnN0cmFjdENvbXBvbmVudCBmcm9tIFwiLi9hYnN0cmFjdC1jb21wb25lbnRcIjtcblxuXG5jbGFzcyBMb2FkZXIgZXh0ZW5kcyBBYnN0cmFjdENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLl9waW4gPSB0aGlzLmdldEVsZW1lbnQoKS5xdWVyeVNlbGVjdG9yKGAubG9hZGVyX19waW5gKTtcbiAgICB0aGlzLl9yZXEgPSBudWxsO1xuICAgIHRoaXMuX2RlZyA9IDA7XG5cbiAgICB0aGlzLl9yZXNldCgpO1xuICB9XG5cbiAgc3RhcnRBbmltYXRpb24oKSB7XG4gICAgdGhpcy5fcGluLnN0eWxlLmRpc3BsYXkgPSBgYDtcblxuICAgIGNvbnN0IHN0ZXAgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9kZWcgPSB0aGlzLl9kZWcgPT09IDM2MCA/IDAgOiB0aGlzLl9kZWcgKyA1O1xuICAgICAgdGhpcy5fcGluLnN0eWxlLnRyYW5zZm9ybSA9IGByb3RhdGVZKCR7dGhpcy5fZGVnfWRlZylgO1xuICAgICAgdGhpcy5fcmVxID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICAgIH07XG5cbiAgICB0aGlzLl9yZXEgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gIH1cblxuICBzdG9wQW5pbWF0aW9uKCkge1xuICAgIGlmICh0aGlzLl9yZXEgIT09IG51bGwpIHtcbiAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuX3JlcSk7XG4gICAgfVxuICAgIHRoaXMuX3Jlc2V0KCk7XG4gIH1cblxuICBfcmVzZXQoKSB7XG4gICAgdGhpcy5fcGluLnN0eWxlLmRpc3BsYXkgPSBgbm9uZWA7XG4gICAgdGhpcy5fcGluLnN0eWxlLnRyYW5zZm9ybSA9IGBgO1xuICAgIHRoaXMuX3JlcSA9IG51bGw7XG4gICAgdGhpcy5fZGVnID0gMDtcbiAgfVxuXG4gIF9nZXRUZW1wbGF0ZSgpIHtcbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJsb2FkZXJcIj48ZGl2IGNsYXNzPVwibG9hZGVyX19waW5cIj48L2Rpdj48L2Rpdj5gO1xuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgTG9hZGVyO1xuIiwiY29uc3QgaW1hZ2VzU3RvcmVDb25maWcgPSB7XG4gIHN0b3JhZ2U6IGxvY2FsU3RvcmFnZSxcbiAga2V5OiBgaW1nc1NlbnRUb0ltZ0JCYCxcbiAgaW5pdGlhbERhdGE6IFtdXG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbWFnZXNTdG9yZUNvbmZpZztcbiIsImNvbnN0IEltZ0JCU2VydmVyQ29uZmlnID0ge1xuICBlbmRQb2ludDogYGh0dHBzOi8vYXBpLmltZ2JiLmNvbS8xYCxcbiAgYXBpS2V5OiBgOTM4YWMxZWI1MWNiYzc1ZGM3NDc2ZWRkZTEzNTBiNjVgXG59O1xuXG5leHBvcnQgZGVmYXVsdCBJbWdCQlNlcnZlckNvbmZpZztcbiIsImltcG9ydCB7cmVuZGVyfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCBJbWdVcGxvYWRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9pbWctdXBsb2FkZXJcIjtcbmltcG9ydCBJbWdMaXN0IGZyb20gXCIuLi9jb21wb25lbnRzL2ltZy1saXN0XCI7XG5pbXBvcnQgSW1nSXRlbSBmcm9tIFwiLi4vY29tcG9uZW50cy9pbWctaXRlbVwiO1xuaW1wb3J0IHtQb3NpdGlvbn0gZnJvbSBcIi4uL2VudW0vZW51bVwiO1xuaW1wb3J0IExvYWRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9sb2FkZXJcIjtcblxuY2xhc3MgR2FsbGVyeUNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIG9uSW1hZ2VTdWJtaXQgPSAoKSA9PiB7fSkge1xuICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcblxuICAgIHRoaXMuX2ltZ1VwbG9hZGVyID0gbmV3IEltZ1VwbG9hZGVyKHtvbkltYWdlU3VibWl0OiAoZm9ybURhdGEpID0+IHtcbiAgICAgIHRoaXMuX29uSW1hZ2VTdWJtaXQoKTtcbiAgICAgIG9uSW1hZ2VTdWJtaXQoZm9ybURhdGEpO1xuICAgIH19KTtcblxuICAgIHRoaXMuX2xvYWRlciA9IG5ldyBMb2FkZXIoKTtcblxuICAgIHRoaXMuX2ltZ0xpc3QgPSBuZXcgSW1nTGlzdCgpO1xuICAgIHRoaXMuX2luaXQoKTtcbiAgfVxuXG4gIHVwZGF0ZUltYWdlcyhpbWFnZXMpIHtcbiAgICB0aGlzLl9pbWdMaXN0LmdldEVsZW1lbnQoKS5pbm5lckhUTUwgPSBgYDtcbiAgICBpbWFnZXMuZm9yRWFjaCgoaW1hZ2UpID0+IHtcbiAgICAgIHJlbmRlcih0aGlzLl9pbWdMaXN0LmdldEVsZW1lbnQoKSwgbmV3IEltZ0l0ZW0oaW1hZ2UpLmdldEVsZW1lbnQoKSwgUG9zaXRpb24uQkVGT1JFRU5EKTtcbiAgICB9KTtcbiAgICB0aGlzLnVubG9jaygpO1xuICB9XG5cbiAgdW5sb2NrKCkge1xuICAgIHRoaXMuX2ltZ1VwbG9hZGVyLnVuQmxvY2soKTtcbiAgICB0aGlzLl9sb2FkZXIuc3RvcEFuaW1hdGlvbigpO1xuICB9XG5cbiAgX2luaXQoKSB7XG4gICAgcmVuZGVyKHRoaXMuX2NvbnRhaW5lciwgdGhpcy5faW1nVXBsb2FkZXIuZ2V0RWxlbWVudCgpLCBQb3NpdGlvbi5CRUZPUkVFTkQpO1xuICAgIHJlbmRlcih0aGlzLl9jb250YWluZXIsIHRoaXMuX2xvYWRlci5nZXRFbGVtZW50KCksIFBvc2l0aW9uLkJFRk9SRUVORCk7XG4gICAgcmVuZGVyKHRoaXMuX2NvbnRhaW5lciwgdGhpcy5faW1nTGlzdC5nZXRFbGVtZW50KCksIFBvc2l0aW9uLkJFRk9SRUVORCk7XG4gIH1cblxuICBfb25JbWFnZVN1Ym1pdCgpIHtcbiAgICB0aGlzLl9pbWdVcGxvYWRlci5ibG9jaygpO1xuICAgIHRoaXMuX2xvYWRlci5zdGFydEFuaW1hdGlvbigpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdhbGxlcnlDb250cm9sbGVyO1xuIiwiZXhwb3J0IGNvbnN0IE1ldGhvZCA9IHtcbiAgR0VUOiBgZ2V0YCxcbiAgUE9TVDogYHBvc3RgXG59O1xuXG5leHBvcnQgY29uc3QgUG9zaXRpb24gPSB7XG4gIEFGVEVSQkVHSU46IGBhZnRlcmJlZ2luYCxcbiAgQkVGT1JFRU5EOiBgYmVmb3JlZW5kYFxufTtcblxuZXhwb3J0IGNvbnN0IFRhZ05hbWUgPSB7XG4gIElOUFVUOiBgSU5QVVRgLFxuICBCVVRUT046IGBCVVRUT05gLFxuICBMQUJFTDogYExBQkVMYFxufTtcbiIsImltcG9ydCBBcGkgZnJvbSBcIi4vc2VydmVyL2FwaVwiO1xuaW1wb3J0IEltZ0JCU2VydmVyQ29uZmlnIGZyb20gXCIuL2NvbmZpZ3MvaW1nLWItYi1zZXJ2ZXItY29uZmlnXCI7XG5pbXBvcnQgR2FsbGVyeUNvbnRyb2xsZXIgZnJvbSBcIi4vY29udHJvbGxlcnMvZ2FsbGVyeS1jb250cm9sbGVyXCI7XG5pbXBvcnQge2VuY29kZVRvQmFzZTY0fSBmcm9tIFwiLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IGltYWdlc1N0b3JlQ29uZmlnIGZyb20gXCIuL2NvbmZpZ3MvaW1hZ2VzLXN0b3JlLWNvbmZpZ1wiO1xuaW1wb3J0IEFyclN0b3JlIGZyb20gXCIuL3N0b3JhZ2UvYXJyLXN0b3JlXCI7XG5cblxuY29uc3QgaW1nQkJBUEkgPSBuZXcgQXBpKEltZ0JCU2VydmVyQ29uZmlnKTtcbmNvbnN0IGltYWdlc1N0b3JlID0gbmV3IEFyclN0b3JlKGltYWdlc1N0b3JlQ29uZmlnKTtcblxuY29uc3Qgb25JbWFnZVN1Ym1pdCA9IGFzeW5jIChmb3JtRGF0YSkgPT4ge1xuICBjb25zdCBpbWFnZUZpbGUgPSBmb3JtRGF0YS5nZXQoYGltYWdlYCk7XG5cbiAgY29uc3QgaW1nQmFzZTY0ID0gYXdhaXQgZW5jb2RlVG9CYXNlNjQoaW1hZ2VGaWxlKTtcbiAgZm9ybURhdGEuc2V0KGBpbWFnZWAsIGltZ0Jhc2U2NC5yZXBsYWNlKC9eLiosLywgYGApKTtcblxuICBjb25zdCB1cGxvYWRlZERhdGEgPSBhd2FpdCBpbWdCQkFQSS51cGxvYWRJbWcoZm9ybURhdGEpO1xuICBpZiAoaW1hZ2VzU3RvcmUuZGF0YS5ldmVyeSgoaW1hZ2UpID0+IGltYWdlLmlkICE9PSB1cGxvYWRlZERhdGEuaWQpKSB7XG4gICAgaW1hZ2VzU3RvcmUucHVzaCh1cGxvYWRlZERhdGEpO1xuICAgIGdhbGxlcnlDb250cm9sbGVyLnVwZGF0ZUltYWdlcyhpbWFnZXNTdG9yZS5kYXRhKTtcblxuICAgIHJldHVybjtcbiAgfVxuXG4gIGFsZXJ0KGBJbWFnZSBpbiBnYWxsZXJ5IGFscmVhZHkhISFgKTtcbiAgZ2FsbGVyeUNvbnRyb2xsZXIudW5sb2NrKCk7XG59O1xuXG5jb25zdCBnYWxsZXJ5Q29udHJvbGxlciA9IG5ldyBHYWxsZXJ5Q29udHJvbGxlcihkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjcm9vdGApLCBvbkltYWdlU3VibWl0KTtcbmdhbGxlcnlDb250cm9sbGVyLnVwZGF0ZUltYWdlcyhpbWFnZXNTdG9yZS5kYXRhKTtcbiIsImltcG9ydCB7TWV0aG9kfSBmcm9tIFwiLi4vZW51bS9lbnVtXCI7XG5pbXBvcnQge3RvSlNPTn0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgSW1nQkIgZnJvbSBcIi4uL2FkYXB0ZXJzL2ltZy1iYlwiO1xuXG5cbmNsYXNzIEFwaSB7XG4gIGNvbnN0cnVjdG9yKHtlbmRQb2ludCwgYXBpS2V5fSkge1xuICAgIHRoaXMuX2VuZFBvaW50ID0gZW5kUG9pbnQ7XG4gICAgdGhpcy5fYXBpS2V5ID0gYXBpS2V5O1xuICB9XG5cbiAgdXBsb2FkSW1nKGZvcm1EYXRhKSB7XG4gICAgZm9ybURhdGEuc2V0KGBrZXlgLCB0aGlzLl9hcGlLZXkpO1xuICAgIHJldHVybiB0aGlzLl9sb2FkKHtcbiAgICAgIHVybDogYHVwbG9hZGAsXG4gICAgICBtZXRob2Q6IE1ldGhvZC5QT1NULFxuICAgICAgdGltZW91dDogMTAwMDAsXG4gICAgICBib2R5OiBmb3JtRGF0YVxuICAgIH0pXG4gICAgICAudGhlbih0b0pTT04pXG4gICAgICAudGhlbigoanNvbkRhdGEpID0+IEltZ0JCLnBhcnNlSW1nKGpzb25EYXRhLmRhdGEpKTtcbiAgfVxuICBfbG9hZCh7dXJsLCBtZXRob2QgPSBNZXRob2QuR0VULCBib2R5ID0gbnVsbCwgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCksIHRpbWVvdXQgPSA1MDAwfSkge1xuICAgIGNvbnN0IGNoZWNrU3RhdHVzID0gKHJlc3BvbnNlKSA9PiB7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZldGNoKGAke3RoaXMuX2VuZFBvaW50fS8ke3VybH1gLCB7bWV0aG9kLCBib2R5LCBoZWFkZXJzLCB0aW1lb3V0fSlcbiAgICAgIC50aGVuKGNoZWNrU3RhdHVzKVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBBcGk7XG4iLCJjbGFzcyBBcnJTdG9yZSB7XG4gIGNvbnN0cnVjdG9yKHtzdG9yYWdlLCBrZXksIGluaXRpYWxEYXRhfSkge1xuICAgIHRoaXMuX3N0b3JhZ2UgPSBzdG9yYWdlO1xuICAgIHRoaXMuX2tleSA9IGtleTtcbiAgICB0aGlzLl9kYXRhID0gdGhpcy5pc0luU3RvcmFnZSA/XG4gICAgICBKU09OLnBhcnNlKHRoaXMuX3N0b3JhZ2UuZ2V0SXRlbSh0aGlzLl9rZXkpKVxuICAgICAgOiB0aGlzLl9zdG9yYWdlLnNldEl0ZW0odGhpcy5fa2V5LCBKU09OLnN0cmluZ2lmeShpbml0aWFsRGF0YSkpO1xuICB9XG5cbiAgZ2V0IGlzSW5TdG9yYWdlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdG9yYWdlLmdldEl0ZW0odGhpcy5fa2V5KSAhPT0gbnVsbDtcbiAgfVxuXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLm1hcCgob2JqKSA9PiBPYmplY3QuYXNzaWduKHt9LCBvYmopKTtcbiAgfVxuXG4gIHB1c2goZGF0YSkge1xuICAgIHRoaXMuX2RhdGEucHVzaChkYXRhKTtcbiAgICB0aGlzLl9zYXZlKCk7XG4gIH1cblxuICBfc2F2ZSgpIHtcbiAgICB0aGlzLl9zdG9yYWdlLnNldEl0ZW0odGhpcy5fa2V5LCBKU09OLnN0cmluZ2lmeSh0aGlzLl9kYXRhKSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXJyU3RvcmU7XG4iLCJpbXBvcnQge1Bvc2l0aW9ufSBmcm9tIFwiLi4vZW51bS9lbnVtXCI7XG5cbmV4cG9ydCBjb25zdCB0b0pTT04gPSAocmVzcG9uc2UpID0+IHtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVFbGVtZW50ID0gKHRlbXBsYXRlKSA9PiB7XG4gIGNvbnN0IG5ld0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGBkaXZgKTtcbiAgbmV3RWxlbWVudC5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgcmV0dXJuIG5ld0VsZW1lbnQuZmlyc3RDaGlsZDtcbn07XG5cbmV4cG9ydCBjb25zdCByZW5kZXIgPSAoY29udGFpbmVyLCBlbGVtZW50LCBwbGFjZSkgPT4ge1xuICBzd2l0Y2ggKHBsYWNlKSB7XG4gICAgY2FzZSBQb3NpdGlvbi5BRlRFUkJFR0lOOlxuICAgICAgY29udGFpbmVyLnByZXBlbmQoZWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFBvc2l0aW9uLkJFRk9SRUVORDpcbiAgICAgIGNvbnRhaW5lci5hcHBlbmQoZWxlbWVudCk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBicmVhaztcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHVubW91bnQgPSAoZWxlbWVudCkgPT4ge1xuICBpZiAoZWxlbWVudCkge1xuICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBlbmNvZGVUb0Jhc2U2NCA9IChmaWxlKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZWFkZXIucmVhZEFzRGF0YVVSTChmaWxlKTtcbiAgICByZWFkZXIub25sb2FkID0gKCkgPT4ge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcbiAgICB9O1xuICAgIHJlYWRlci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcik7XG4gICAgfTtcbiAgfSk7XG59O1xuXG4iXX0=
